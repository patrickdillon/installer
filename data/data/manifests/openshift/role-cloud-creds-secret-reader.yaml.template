kind: Role
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  namespace: kube-system
{{- if .CloudCreds.AWS}}
  name: aws-creds-secret-reader
{{- else if .CloudCreds.Azure}}
  name: azure-creds-secret-reader
{{- else if .CloudCreds.GCP}}
  name: gcp-creds-secret-reader
{{- else if .CloudCreds.OpenStack}}
  name: openstack-creds-secret-reader
{{- else if .CloudCreds.VSphere}}
  name: vsphere-creds-secret-reader
{{- else if .CloudCreds.Ovirt}}
  name: ovirt-creds-secret-reader
{{- else if .CloudCreds.Kubevirt}}
  name: kubevirt-creds-secret-reader
{{- end}}
rules:
- apiGroups: [""]
  resources: ["secrets"]
{{- if .CloudCreds.AWS}}
  resourceNames: ["aws-creds"]
{{- else if .CloudCreds.Azure}}
  resourceNames: ["azure-credentials"]
{{- else if .CloudCreds.GCP}}
  resourceNames: ["gcp-credentials"]
{{- else if .CloudCreds.OpenStack}}
  resourceNames: ["openstack-credentials"]
{{- else if .CloudCreds.VSphere}}
  resourceNames: ["vsphere-creds"]
{{- else if .CloudCreds.Ovirt}}
  resourceNames: ["ovirt-credentials"]
{{- else if .CloudCreds.Kubevirt}}
  resourceNames: ["kubevirt-credentials"]
{{- end}}
  verbs: ["get"]
# Add conditional logic to only write the role and role binding (below) when ASH or ARO
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: system:azure-cloud-provider-secret-getter
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resourceNames:
  - azure-cloud-provider
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: system:azure-cloud-provider-secret-getter
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: system:azure-cloud-provider-secret-getter
subjects:
- kind: ServiceAccount
  name: azure-cloud-provider
  namespace: kube-system