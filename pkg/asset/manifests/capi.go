package manifests

import (
	"path/filepath"

	"github.com/pkg/errors"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	capi "sigs.k8s.io/cluster-api/api/v1beta1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
	"github.com/openshift/installer/pkg/asset/openshiftinstall"
	"github.com/openshift/installer/pkg/asset/rhcos"
	awstypes "github.com/openshift/installer/pkg/types/aws"
)

const (
	infraManifestDir    = "infra"
	capiGuestsNamespace = "openshift-cluster-api-guests"
)

var (
	_ asset.WritableAsset = (*ClusterAPI)(nil)
)

// ClusterAPI generates manifests for target cluster
// creation using CAPI.
type ClusterAPI struct {
	FileList []*asset.File
}

// Name returns a human friendly name for the operator
func (c *ClusterAPI) Name() string {
	return "ClusterAPI Manifests"
}

// Dependencies returns all of the dependencies directly needed by the
// ClusterAPI asset
func (c *ClusterAPI) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
		&installconfig.ClusterID{},
		&openshiftinstall.Config{},
		&FeatureGate{},
		new(rhcos.Image),
	}
}

// Generate generates the respective operator config.yml files
func (c *ClusterAPI) Generate(dependencies asset.Parents) error {
	installConfig := &installconfig.InstallConfig{}
	clusterID := &installconfig.ClusterID{}
	openshiftInstall := &openshiftinstall.Config{}
	featureGate := &FeatureGate{}
	rhcosImage := new(rhcos.Image)
	dependencies.Get(installConfig, clusterID, openshiftInstall, featureGate, rhcosImage)

	platform := installConfig.Config.Platform.Name()

	ns := v1.Namespace{
		TypeMeta: metav1.TypeMeta{
			Kind: "Namespace",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: capiGuestsNamespace,
		},
	}

	cluster := capi.Cluster{
		TypeMeta: metav1.TypeMeta{
			APIVersion: "cluster.x-k8s.io/v1beta1",
			Kind:       "Cluster",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      clusterID.InfraID,
			Namespace: capiGuestsNamespace,
		},
		Spec: capi.ClusterSpec{
			InfrastructureRef: &v1.ObjectReference{},
		},
	}

	switch platform {
	case awstypes.Name:
		cluster.Spec.InfrastructureRef.Kind = "AWSCluster"

	}

	clusterData, err := yaml.Marshal(cluster)
	if err != nil {
		return errors.Wrapf(err, "failed to create cluster manifest from InstallConfig")
	}

	nsData, err := yaml.Marshal(ns)
	if err != nil {
		return errors.Wrapf(err, "failed to create capi namespace manifest from InstallConfig")
	}

	c.FileList = []*asset.File{}

	c.FileList = append(c.FileList, &asset.File{
		Filename: filepath.Join(infraManifestDir, "01-capi-cluster.yaml"),
		Data:     clusterData,
	})

	c.FileList = append(c.FileList, &asset.File{
		Filename: filepath.Join(infraManifestDir, "00_openshift-cluster-api-guests-ns.yaml"),
		Data:     nsData,
	})

	asset.SortFiles(c.FileList)

	return nil
}

// Files returns the files generated by the asset.
func (c *ClusterAPI) Files() []*asset.File {
	return c.FileList
}

// Load returns the openshift asset from disk.
func (c *ClusterAPI) Load(f asset.FileFetcher) (bool, error) {
	yamlFileList, err := f.FetchByPattern(filepath.Join(infraManifestDir, "*.yaml"))
	if err != nil {
		return false, errors.Wrap(err, "failed to load *.yaml files")
	}
	ymlFileList, err := f.FetchByPattern(filepath.Join(infraManifestDir, "*.yml"))
	if err != nil {
		return false, errors.Wrap(err, "failed to load *.yml files")
	}
	jsonFileList, err := f.FetchByPattern(filepath.Join(infraManifestDir, "*.json"))
	if err != nil {
		return false, errors.Wrap(err, "failed to load *.json files")
	}
	fileList := append(yamlFileList, ymlFileList...)
	fileList = append(fileList, jsonFileList...)

	for _, file := range fileList {
		c.FileList = append(c.FileList, file)
	}

	asset.SortFiles(c.FileList)
	return len(c.FileList) > 0, nil
}
